// <auto-generated />
using System;
using Infrastructure.Data.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations.Domain
{
    [DbContext(typeof(DomainDbContext))]
    [Migration("20230113120007_SeedUsersAndForms")]
    partial class SeedUsersAndForms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("domain")
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormSubmitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Answer", "domain");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("Domain.DomainUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserAuthId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("DomainUsers", "domain");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c177013-3086-4f27-b700-bf02c1f327dc"),
                            Email = "seed1.df@gmail.com",
                            IsDeleted = false,
                            UserAuthId = new Guid("4c177013-3086-4f27-b700-bf02c1f327dc"),
                            UserName = "seed1.df@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("e4eb0b1c-3cda-4548-a5bf-7dcc79cf9a4c"),
                            Email = "seed2.df@gmail.com",
                            IsDeleted = false,
                            UserAuthId = new Guid("44eb0b1c-3cda-4548-a5bf-7dcc79cf9a4c"),
                            UserName = "seed2.df@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("f07f9516-94bd-4251-8756-822a582e7df6"),
                            Email = "seed3.df@gmail.com",
                            IsDeleted = false,
                            UserAuthId = new Guid("407f9516-94bd-4251-8756-822a582e7df6"),
                            UserName = "seed3.df@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Forms", "domain");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f58bde8f-1dca-415a-b7b7-51b42b661425"),
                            CreatorId = new Guid("3c177013-3086-4f27-b700-bf02c1f327dc"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5880), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed1.df Form1",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("283c6c24-a935-4207-b298-dbcaaa96b99b"),
                            CreatorId = new Guid("3c177013-3086-4f27-b700-bf02c1f327dc"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5939), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed1.df Form2",
                            Visibility = 1
                        },
                        new
                        {
                            Id = new Guid("8e044c96-30ea-4505-af55-b8bd14b68718"),
                            CreatorId = new Guid("3c177013-3086-4f27-b700-bf02c1f327dc"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5957), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed1.df Form3",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("d1eb82bd-0ee7-476b-8e42-0dc13f7901b4"),
                            CreatorId = new Guid("e4eb0b1c-3cda-4548-a5bf-7dcc79cf9a4c"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5961), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed2.df Form1",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("c7dd3259-575a-42bb-bf1f-6b4e223541ce"),
                            CreatorId = new Guid("e4eb0b1c-3cda-4548-a5bf-7dcc79cf9a4c"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5965), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed2.df Form1",
                            Visibility = 1
                        },
                        new
                        {
                            Id = new Guid("e704ffd1-f7e6-457a-893d-249a4f16d9d7"),
                            CreatorId = new Guid("e4eb0b1c-3cda-4548-a5bf-7dcc79cf9a4c"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5973), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed2.df Form1",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("2254932b-6fc8-45b4-82ea-cf7565c3fbe5"),
                            CreatorId = new Guid("f07f9516-94bd-4251-8756-822a582e7df6"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5977), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed3.df Form1",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("9e6215d6-27f5-4502-9f1d-df535e265a65"),
                            CreatorId = new Guid("f07f9516-94bd-4251-8756-822a582e7df6"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(5981), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed3.df Form1",
                            Visibility = 1
                        },
                        new
                        {
                            Id = new Guid("33b311c4-a113-42d2-a6d4-99370b17dd4b"),
                            CreatorId = new Guid("f07f9516-94bd-4251-8756-822a582e7df6"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 1, 13, 15, 0, 7, 265, DateTimeKind.Unspecified).AddTicks(6007), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Seed seed3.df Form1",
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("Domain.FormSubmit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("FormSubmits", "domain");
                });

            modelBuilder.Entity("Domain.PrivateFormAccessor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AccessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccessorId");

                    b.HasIndex("FormId");

                    b.ToTable("PrivateFormAccessors", "domain");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Question", "domain");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("Domain.InputAnswer", b =>
                {
                    b.HasBaseType("Domain.Answer");

                    b.Property<Guid>("InputQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FormSubmitId");

                    b.HasIndex("InputQuestionId");

                    b.HasDiscriminator().HasValue("InputAnswer");
                });

            modelBuilder.Entity("Domain.InputQuestion", b =>
                {
                    b.HasBaseType("Domain.Question");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("FormId");

                    b.HasDiscriminator().HasValue("InputQuestion");
                });

            modelBuilder.Entity("Domain.SelectAnswer", b =>
                {
                    b.HasBaseType("Domain.Answer");

                    b.Property<Guid>("SelectQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FormSubmitId");

                    b.HasIndex("SelectQuestionId");

                    b.HasDiscriminator().HasValue("SelectAnswer");
                });

            modelBuilder.Entity("Domain.SelectQuestion", b =>
                {
                    b.HasBaseType("Domain.Question");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FormId");

                    b.HasDiscriminator().HasValue("SelectQuestion");
                });

            modelBuilder.Entity("Domain.Form", b =>
                {
                    b.HasOne("Domain.DomainUser", "Creator")
                        .WithMany("CreatedForms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.FormSubmit", b =>
                {
                    b.HasOne("Domain.Form", "Form")
                        .WithMany("FormSubmits")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.DomainUser", "User")
                        .WithMany("FormSubmits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.PrivateFormAccessor", b =>
                {
                    b.HasOne("Domain.DomainUser", "Accessor")
                        .WithMany("AccessedPrivateForms")
                        .HasForeignKey("AccessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Form", "Form")
                        .WithMany("Accessors")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accessor");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Domain.InputAnswer", b =>
                {
                    b.HasOne("Domain.FormSubmit", "FormSubmit")
                        .WithMany("InputAnswers")
                        .HasForeignKey("FormSubmitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.InputQuestion", "InputQuestion")
                        .WithMany("InputAnswers")
                        .HasForeignKey("InputQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FormSubmit");

                    b.Navigation("InputQuestion");
                });

            modelBuilder.Entity("Domain.InputQuestion", b =>
                {
                    b.HasOne("Domain.Form", "Form")
                        .WithMany("InputQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Domain.SelectAnswer", b =>
                {
                    b.HasOne("Domain.FormSubmit", "FormSubmit")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("FormSubmitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.SelectQuestion", "SelectQuestion")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("SelectQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FormSubmit");

                    b.Navigation("SelectQuestion");
                });

            modelBuilder.Entity("Domain.SelectQuestion", b =>
                {
                    b.HasOne("Domain.Form", "Form")
                        .WithMany("SelectQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Domain.DomainUser", b =>
                {
                    b.Navigation("AccessedPrivateForms");

                    b.Navigation("CreatedForms");

                    b.Navigation("FormSubmits");
                });

            modelBuilder.Entity("Domain.Form", b =>
                {
                    b.Navigation("Accessors");

                    b.Navigation("FormSubmits");

                    b.Navigation("InputQuestions");

                    b.Navigation("SelectQuestions");
                });

            modelBuilder.Entity("Domain.FormSubmit", b =>
                {
                    b.Navigation("InputAnswers");

                    b.Navigation("SelectAnswers");
                });

            modelBuilder.Entity("Domain.InputQuestion", b =>
                {
                    b.Navigation("InputAnswers");
                });

            modelBuilder.Entity("Domain.SelectQuestion", b =>
                {
                    b.Navigation("SelectAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
